Index: app/src/main/java/com/nutristar/presentation/main/nutristartab/home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.nutristar.presentation.main.nutristartab.home\n\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.view.View\nimport android.widget.LinearLayout\nimport androidx.activity.OnBackPressedCallback\nimport androidx.appcompat.widget.AppCompatImageView\nimport androidx.core.content.ContextCompat\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\nimport androidx.viewpager2.widget.ViewPager2\nimport com.nutristar.R\nimport com.nutristar.common.extensions.hide\nimport com.nutristar.common.extensions.show\nimport com.nutristar.common.extensions.showSnackBar\nimport com.nutristar.common.utils.KeyUtils\nimport com.nutristar.common.utils.KeyUtils.LIMITED_OFFERS\nimport com.nutristar.common.utils.KeyUtils.NEWLY_ADDED\nimport com.nutristar.common.utils.KeyUtils.RECENTLY_VIEWED\nimport com.nutristar.common.utils.NotificationUtil\nimport com.nutristar.common.utils.ProgressDialogUtil\nimport com.nutristar.data.common.entity.ResponseDefault\nimport com.nutristar.data.home.entity.*\nimport com.nutristar.presentation.common.Resource\nimport com.nutristar.presentation.common.Status\nimport com.nutristar.presentation.common.base.BaseViewModelFragment\nimport com.nutristar.presentation.common.base.SafeObserver\nimport com.nutristar.presentation.main.AppSharedViewModel\nimport com.nutristar.presentation.main.MainActivity\nimport com.nutristar.presentation.main.categorytab.CategoriesFragment\nimport com.nutristar.presentation.main.nutristartab.home.adapter.*\nimport kotlinx.android.synthetic.main.fragment_home.*\nimport kotlinx.android.synthetic.main.nav_header_home.*\nimport timber.log.Timber\n\nclass HomeFragment : BaseViewModelFragment<HomeViewModel>(), View.OnClickListener,\n        SwipeRefreshLayout.OnRefreshListener {\n\n    private val productId: Int = 0\n    private val isMove: Int = 0\n    private var isSelected = true\n    private var currentPosition = 1\n\n    companion object {\n        var isNewlyAdded = false\n        var categoryLabel = \"\"\n        var isOtherSelected = false\n    }\n\n    private var limitedTimeOfferProducts: ArrayList<Product> = ArrayList()\n    private var recentlyViewedProducts: ArrayList<Product> = ArrayList()\n    private var newlyAddedProducts: ArrayList<Product> = ArrayList()\n    private var otherCategory: ArrayList<OtherCatogory> = ArrayList()\n    private var featureCategory: ArrayList<FetureCategory> = ArrayList()\n    private val advertisementFragmentList = ArrayList<Fragment>()\n    private var slidingImageDots = ArrayList<AppCompatImageView>()\n\n    private var currentPage = 0\n\n    private val productCategoryAdapter by lazy {\n        HomeProductCategoryAdapter(\n            requireActivity().resources.getIntArray(R.array.productCategoryColors),\n            requireActivity().resources.getIntArray(R.array.productCategoryTextColors),\n            ::handleProductList\n        )\n    }\n\n    private fun handleProductList(fixFeatureCategory: FixFeatureCategory) {\n        fixFeatureCategory.slug?.let {\n            val directions = HomeFragmentDirections.actionNutristarFragmentToOfferProductsFragment(\n                id = 0,\n                slug = it,\n                from = KeyUtils.HOME\n            )\n            findNavController().navigate(directions)\n        }\n    }\n\n    private val sharedViewModel by lazy {\n        ViewModelProviders.of(\n            requireActivity(),\n            viewModelFactory\n        )[AppSharedViewModel::class.java]\n    }\n\n\n    private val circularPagerAdapter by lazy {\n        CircularPagerAdapter(advertisementFragmentList, childFragmentManager, lifecycle)\n    }\n\n    private fun handleClickOnBanner(bannerItem: BannerItem) {\n\n    }\n\n    private val categoryAdapter by lazy {\n        HomeCategoryAdapter(requireContext(), ::handleCategoryClick)\n    }\n\n    private fun handleCategoryClick(categoryItem: CategoryItem) {\n        categoryItem.slug?.let {\n            val direction = HomeFragmentDirections.actionNutristarFragmentToCategoryDetailsFragment(\n                    it\n            )\n            findNavController().navigate(direction)\n        }\n    }\n\n    private val homeAdvertisementAdapter by lazy {\n        HomeAdversementAdapter(requireActivity(), ::handleClickOnBanner)\n    }\n\n    private val brandAdapter by lazy { HomeBrandAdapter(::handleBrandClick) }\n\n    private fun handleBrandClick(brandItem: BrandItem) {\n        brandItem.slug?.let {\n            val direction = HomeFragmentDirections.actionNutristarFragmentToBrandDetailsFragment(\n                it\n            )\n            findNavController().navigate(direction)\n        }\n    }\n\n    private val dealsAdapter by lazy { HomeDealsAdapter(::handleClickOffers) }\n\n    private fun handleClickOffers(dealOfTheDay: DealOfTheDay) {\n\n    }\n\n    private val videoAdapter by lazy {\n        HomeVideoAdapter(\n            onItemClick = { model, _ ->\n                val args = Bundle().apply {\n                    putString(\"webUrl\", model.link)\n                }\n                findNavController().navigate(\n                    R.id.action_nutristarFragment_to_videoDetailsFragment,\n                    args\n                )\n            }\n        )\n    }\n\n    private val blogAdapter by lazy { HomeBlogsAdapter(::handleClick) }\n\n    private fun handleClick(blogItem: BlogItem, i: Int) {\n        blogItem.slug?.let {\n            val direction = HomeFragmentDirections.actionNutristarFragmentToBlogDetailsFragment(\n                it\n            )\n            findNavController().navigate(direction)\n        }\n\n    }\n\n    private val featuredProductLabelAdapter by lazy {\n        HomeFeatureProductLabelAdapter(\n            onItemClick = { model, position ->\n                categoryLabel = model.name.toString()\n                rvFeaturedProductLabel?.layoutManager?.smoothScrollToPosition(\n                    rvFeaturedProductLabel,\n                    null,\n                    position\n                )\n                setFeaturedProductList(\n                    model.featureCategoryProducts as ArrayList<Product>,\n                    0\n                )\n            }\n        )\n    }\n\n    private fun handelFavoutite(slug: String?, isSelected: Boolean, position: Product) {\n        isOtherSelected = featureCategory.find { it.name == categoryLabel }?.isItemSelected ?: false\n        isNewlyAdded = tvNewlyAdded.text.toString() ==\n                otherCategory.find { it.featureCategoryProducts?.find { it1 -> it1.id == position.id } != null }?.name\n        this.isSelected = isSelected\n        slug?.let { viewModel.addFavourite(productId, it, isSelected, isMove) }\n    }\n\n    private fun handelClickEvent(position: Product) {\n        val slug = position.slug\n        slug.let {\n            val direction = slug?.let { it1 ->\n                HomeFragmentDirections.actionNutristarFragmentToProductDetailsFragment(\n                    slug = it1\n                )\n            }\n            direction?.let { it1 -> findNavController().navigate(it1) }\n        }\n    }\n\n    override fun getContentResource(): Int = R.layout.fragment_home\n\n    override fun injectDagger() {\n        initPresenterComponent()?.inject(this)\n    }\n\n    override fun buildViewModel(): HomeViewModel {\n        return ViewModelProviders.of(this, viewModelFactory)[HomeViewModel::class.java]\n    }\n\n    override fun initLiveDataObservers() {\n        super.initLiveDataObservers()\n        (requireActivity() as MainActivity).setBottomViewVisible(true)\n\n        viewModel.homeLiveData.observe(\n            viewLifecycleOwner,\n            SafeObserver(this::handleHomeResponse)\n        )\n        sharedViewModel.categoryEventLiveEvent.observe(viewLifecycleOwner, SafeObserver {\n            if (it) {\n                viewModel.fetchHomeData()\n            }\n        })\n        sharedViewModel.HomeEventListner.observe(viewLifecycleOwner, SafeObserver {\n            if (it) {\n                viewModel.fetchHomeData()\n            }\n        })\n        sharedViewModel.productEventLiveEvent.observe(viewLifecycleOwner, SafeObserver {\n            if (it) {\n                viewModel.fetchHomeData()\n            }\n        })\n        viewModel.addFavoriteLiveEvent.observe(\n            viewLifecycleOwner,\n            SafeObserver(::handleAddFaviourite)\n        )\n    }\n\n    private fun handleAddFaviourite(resource: Resource<ResponseDefault>) {\n        when (resource.status) {\n            Status.SUCCESS -> {\n                viewModel.fetchHomeData()\n                if (isSelected) {\n                    isSelected = false\n                    view.showSnackBar(getString(R.string.added_to_wishlist))\n                } else {\n                    isSelected = false\n                    view.showSnackBar(getString(R.string.removed_to_wishlist))\n                }\n            }\n        }\n    }\n\n    private fun setFixFeatureCategory(list: ArrayList<FixFeatureCategory>) {\n        // Set adapter for the fix feature categories\n        productCategoryAdapter.addAll(list, true)\n        rvProductCategory.adapter = productCategoryAdapter\n    }\n\n    private fun setFeatureCategoryLabels(featureCategoryLabelList: ArrayList<FetureCategory>) {\n        featuredProductLabelAdapter.addAll(featureCategoryLabelList, true)\n        rvFeaturedProductLabel.adapter = featuredProductLabelAdapter\n    }\n\n    private fun setFeaturedProductList(\n        featuredProductLabelList: ArrayList<Product>,\n        count: Int\n    ) {\n        val featuredProductAdapter by lazy {\n            HomeFeatureProductAdapter(\n                this::handelClickEvent,\n                this::handleViewAllFeature,\n                this::handelFavoutite, count\n            )\n        }\n        rvFeaturedProduct.adapter = featuredProductAdapter\n        // Need to update list according to feature product selection.\n        featuredProductAdapter.addAll(featuredProductLabelList, true)\n\n    }\n\n    private fun handleViewAllFeature(position: Product) {\n        val slug =\n            featureCategory.find { it.featureCategoryProducts?.find { it1 -> it1.id == position.id } != null }?.slug\n        slug?.let {\n            val directions = HomeFragmentDirections.actionNutristarFragmentToOfferProductsFragment(\n                id = 0,\n                slug = it,\n                from = KeyUtils.HOME\n            )\n            findNavController().navigate(directions)\n        }\n    }\n\n    private fun setOtherProductList(\n        otherProductList: ArrayList<Product>,\n        count: Int\n    ) {\n        val featuredOtherProductAdapter by lazy {\n            HomeFeatureOtherProductAdapter(\n                this::handelClickEvent,\n                this::handelFavoutite,\n                this::handleViewAll,\n                requireContext(), count\n            )\n        }\n        rvOtherProduct.adapter = featuredOtherProductAdapter\n        // Need to update list according to feature product selection.\n        featuredOtherProductAdapter.addAll(otherProductList, true)\n\n    }\n\n    private fun handleViewAll(position: Product) {\n        val slug =\n            otherCategory.find { it.featureCategoryProducts?.find { it1 -> it1.id == position.id } != null }?.slug\n        slug?.let {\n            val directions = HomeFragmentDirections.actionNutristarFragmentToOfferProductsFragment(\n                id = 0,\n                slug = it,\n                from = KeyUtils.HOME\n            )\n            findNavController().navigate(directions)\n        }\n    }\n\n    override fun initViews() {\n        super.initViews()\n        setOnClickListner()\n        configRecyclerViewGroup()\n        tvTitle.text = viewModel.getPincode\n\n        if (activity is MainActivity &&\n            (activity as MainActivity).intent.extras != null &&\n            NotificationUtil.isFromNotification((activity as MainActivity).intent.extras)\n        ) {\n//            manageNavigationBasedOnNotification((activity as MainActivity).intent.extras!!)\n            return\n        }\n        val onBackPressedCallback: OnBackPressedCallback = object : OnBackPressedCallback(true) {\n            override fun handleOnBackPressed() {\n                findNavController().popBackStack()\n                if (parentFragmentManager.backStackEntryCount == 0) {\n                    requireActivity().finish()\n                }\n            }\n        }\n        requireActivity().onBackPressedDispatcher.addCallback(onBackPressedCallback)\n    }\n\n    private fun setOnClickListner() {\n        tvTitle.setOnClickListener(this)\n        tvLimitedTime.setOnClickListener(this)\n        tvNewlyAdded.setOnClickListener(this)\n        tvRecentlyViewed.setOnClickListener(this)\n        tvBlogViewAll.setOnClickListener(this)\n        tvVideoViewAll.setOnClickListener(this)\n        ivBackHome.setOnClickListener(this)\n        ivSearch.setOnClickListener(this)\n        tvBrandViewAll.setOnClickListener(this)\n        tvDelasViewAll.setOnClickListener(this)\n        srlList.setOnRefreshListener(this)\n        tvCategotyViewAll.setOnClickListener(this)\n        ivLike.setOnClickListener(this)\n    }\n\n    lateinit var slidingCallback: ViewPager2.OnPageChangeCallback\n    private fun configRecyclerViewGroup() {\n\n        // Set Advertismenet adapter\n        vpAdvertisement.apply {\n            adapter = circularPagerAdapter\n        }\n        slidingCallback = object : ViewPager2.OnPageChangeCallback() {\n            override fun onPageSelected(position: Int) {\n                for (i in 0 until slidingImageDots.size) {\n                    slidingImageDots[i]?.setImageDrawable(\n                            ContextCompat.getDrawable(\n                                    requireContext(),\n                                    R.drawable.non_active_dot\n                            )\n                    )\n                }\n                var currentPosition = 0;\n                val currentFragment = circularPagerAdapter.fragmentList[position % circularPagerAdapter.fragmentList.size]\n                if (currentFragment != null) {\n                    var fragment = advertisementFragmentList.find { it -> it == currentFragment }\n                    if (fragment != null) {\n                        currentPosition = advertisementFragmentList.indexOf(fragment)\n                    }\n                }\n\n                slidingImageDots[currentPosition]?.setImageDrawable(\n                        ContextCompat.getDrawable(\n                                requireContext(),\n                                R.drawable.active_dot\n                        )\n                )\n            }\n        }\n        vpAdvertisement.registerOnPageChangeCallback(slidingCallback)\n//        dots_indicator.setViewPager(vpAdvertisement)\n//        vpAdvertisement.isCycle()\n//        vpAdvertisement.setSlideBorderMode(AutoScrollViewPager.SlideBorderMode.CYCLE)\n//        vpAdvertisement.isStopScrollWhenTouch()\n//        vpAdvertisement.startAutoScroll(1000)\n//        vpAdvertisement.setInterval(10000)\n\n        rvCategory.adapter = categoryAdapter\n        rvBrands.adapter = brandAdapter\n        rvDeals.adapter = dealsAdapter\n        rvVideos.adapter = videoAdapter\n        rvBlogs.adapter = blogAdapter\n    }\n\n    override fun onClick(v: View?) {\n        super.onClick(v)\n        when (v?.id) {\n            R.id.tvLimitedTime -> {\n                tvLimitedTime.isSelected = true\n                tvNewlyAdded.isSelected = false\n                tvRecentlyViewed.isSelected = false\n                if (limitedTimeOfferProducts.size > 0) {\n                    otherCategory.find { it.slug == LIMITED_OFFERS }?.count?.let {\n                        setOtherProductList(\n                            limitedTimeOfferProducts,\n                            it\n                        )\n                    }\n                    rvOtherProduct.visibility = View.VISIBLE\n                } else {\n                    rvOtherProduct.visibility = View.GONE\n                }\n            }\n            R.id.tvNewlyAdded -> {\n                tvLimitedTime.isSelected = false\n                tvNewlyAdded.isSelected = true\n                tvRecentlyViewed.isSelected = false\n                if (newlyAddedProducts.size > 0) {\n                    otherCategory.find { it.slug == NEWLY_ADDED }?.count?.let {\n                        setOtherProductList(\n                            newlyAddedProducts,\n                            it\n                        )\n                    }\n                    rvOtherProduct.visibility = View.VISIBLE\n                } else {\n                    rvOtherProduct.visibility = View.GONE\n                }\n            }\n            R.id.tvRecentlyViewed -> {\n                tvLimitedTime.isSelected = false\n                tvNewlyAdded.isSelected = false\n                tvRecentlyViewed.isSelected = true\n                if (recentlyViewedProducts.size > 0) {\n                    otherCategory.find { it.slug == RECENTLY_VIEWED }?.count?.let {\n                        setOtherProductList(\n                            recentlyViewedProducts,\n                            it\n                        )\n                    }\n                    rvOtherProduct.visibility = View.VISIBLE\n                } else {\n                    rvOtherProduct.visibility = View.GONE\n                }\n            }\n            R.id.tvCategotyViewAll -> {\n                CategoriesFragment.isBrandSelected = false\n                findNavController().navigate(\n                    R.id.action_nutristarFragment_to_categoriesFragment,\n                    Bundle().apply {\n                        putBoolean(KeyUtils.IS_BRAND, false)\n                    })\n            }\n            R.id.tvBrandViewAll -> {\n                findNavController().navigate(\n                    R.id.action_nutristarFragment_to_categoriesFragment,\n                    Bundle().apply {\n                        putBoolean(KeyUtils.IS_BRAND, true)\n                    })\n            }\n            R.id.tvDelasViewAll -> findNavController().navigate(R.id.action_nutristarFragment_to_offerListingFragment)\n            R.id.tvBlogViewAll -> findNavController().navigate(R.id.action_nutristarFragment_to_blogsFragment)\n            R.id.tvVideoViewAll -> findNavController().navigate(R.id.action_nutristarFragment_to_videoListingFragment)\n            R.id.ivBackHome,R.id.tvTitle -> findNavController().navigate(\n                R.id.action_nutristarFragment_to_pincodeFragment2,\n                Bundle().apply {\n                    putBoolean(KeyUtils.IS_FROM_PROFILE, true)\n                })\n            R.id.ivSearch -> findNavController().navigate(R.id.action_nutristarFragment_to_searchFragment)\n            R.id.ivLike -> findNavController().navigate(R.id.action_nutristarFragment_to_favouriteFragment)\n        }\n    }\n\n    private var mHandler = Handler(Looper.getMainLooper())\n    private val runnable = Runnable {\n        autoScrollViewpager()\n    }\n\n    private fun autoScrollViewpager() {\n        vpAdvertisement.adapter?.let {\n            val mNextItem = if (vpAdvertisement.currentItem == (vpAdvertisement.adapter!!.itemCount - 1)) {\n                circularPagerAdapter.getCenterPage(vpAdvertisement.currentItem)\n            } else {\n                vpAdvertisement.currentItem + 1\n            }\n            vpAdvertisement.setCurrentItem(mNextItem, true)\n        }\n        mHandler.removeCallbacks(runnable)\n        mHandler.postDelayed(runnable, 3500)\n    }\n\n    private fun startAutoScroll() {\n        mHandler.postDelayed(runnable, 3500)\n    }\n\n    private fun stopAutoScroll() {\n        mHandler.removeCallbacks(runnable)\n    }\n\n    private fun handleHomeResponse(response: Resource<HomeResponse>) {\n        when (response.status) {\n            Status.LOADING -> {\n                context?.let(ProgressDialogUtil::showProgressDialog)\n            }\n            Status.SUCCESS -> {\n                response.data?.data.let {\n                    it?.banner?.let { banners ->\n\n                        val listofBanners = ArrayList<BannerItem>()\n                        listofBanners.addAll(banners)\n                        listofBanners.add(0, listofBanners[listofBanners.size - 1])\n                        listofBanners.add(listofBanners.size, listofBanners[1])\n\n                        val listofBannersGone = ArrayList<BannerItem>()\n                        listofBannersGone.addAll(banners)\n\n\n                        if (banners.isEmpty()) {\n                            fmAdvertizment.hide()\n                        } else {\n                            fmAdvertizment.show()\n//                            homeAdvertisementAdapter.images.clear()\n//                            homeAdvertisementAdapter.images.addAll(banners)\n\n                            banners.mapIndexed { position, it ->\n                                advertisementFragmentList.add(AdvertisementFragment(it, ::handleClickOnBanner))\n                                slidingImageDots.add(position, AppCompatImageView(requireContext()))\n                                if (position == 0){\n                                    slidingImageDots[position]?.setImageDrawable(\n                                            ContextCompat.getDrawable(\n                                                    requireContext(),\n                                                    R.drawable.active_dot\n                                            )\n                                    )\n                                } else {\n                                    slidingImageDots[position]?.setImageDrawable(\n                                            ContextCompat.getDrawable(\n                                                    requireContext(),\n                                                    R.drawable.non_active_dot\n                                            )\n                                    )\n                                }\n\n                                val params =\n                                        LinearLayout.LayoutParams(\n                                                LinearLayout.LayoutParams.WRAP_CONTENT,\n                                                LinearLayout.LayoutParams.WRAP_CONTENT\n                                        )\n\n                                params.setMargins(8, 0, 8, 0)\n                                slider_dots.addView(slidingImageDots[position], params)\n                            }\n\n                            startAutoScroll()\n\n                        }\n                        circularPagerAdapter.notifyDataSetChanged()\n                    }\n                    it?.category?.let { categories ->\n                        if (categories.isEmpty()) {\n                            flCategory.hide()\n                            rvCategory.hide()\n                        } else {\n                            flCategory.show()\n                            rvCategory.show()\n                            categoryAdapter.addAll(categories, true)\n                        }\n                    }\n                    it?.brand?.let { brands ->\n                        if (brands.isEmpty()) {\n                            rvBrands.hide()\n                            flBrand.hide()\n                        } else {\n                            rvBrands.show()\n                            flBrand.show()\n                            brandAdapter.addAll(brands, true)\n                        }\n                    }\n                    it?.video?.let { videos ->\n                        if (videos.isEmpty()) {\n                            flVideo.hide()\n                            rvVideos.hide()\n                        } else {\n                            rvVideos.show()\n                            flVideo.show()\n                            videoAdapter.addAll(\n                                videos.reversed().toCollection(arrayListOf()),\n                                true\n                            )\n                        }\n                    }\n                    it?.blog?.let { blogs ->\n                        if (blogs.isEmpty()) {\n                            flBlog.hide()\n                            rvBlogs.hide()\n                        } else {\n                            rvBlogs.show()\n                            flBlog.show()\n                            blogAdapter.addAll(blogs, true)\n                        }\n                    }\n                    it?.dealsOfTheDay?.let { dealsOfTheDay ->\n                        if (dealsOfTheDay.isEmpty()) {\n                            flDeals.hide()\n                            rvDeals.hide()\n                        } else {\n                            flDeals.show()\n                            rvDeals.show()\n                            dealsAdapter.addAll(\n                                dealsOfTheDay,\n                                true\n                            )\n                        }\n                    }\n                    it?.fixFeaturecategory?.let { fixFeatureCategorys ->\n                        if (fixFeatureCategorys.size > 0) {\n                            Timber.d(\"fixFeatureCategory %s\", fixFeatureCategorys.size.toString())\n                            val list: ArrayList<String> = ArrayList()\n                            for (fixFeatureCategory in fixFeatureCategorys) {\n                                fixFeatureCategory.name?.let { it1 -> list.add(it1) }\n                            }\n                            setFixFeatureCategory(fixFeatureCategorys)\n\n                        }\n                    }\n                    it?.featurecategory?.let { featureCategory ->\n                        this.featureCategory = featureCategory\n                        if (featureCategory.size > 0) {\n                            Timber.d(\"featureCategory %s\", featureCategory.size.toString())\n                            featureCategory[0].isItemSelected = true\n                            setFeatureCategoryLabels(featureCategory)\n                            setFeaturedProductList(\n                                featureCategory[0].featureCategoryProducts as ArrayList<Product>,\n                                featureCategory[0].count\n                            )\n                        }\n\n                    }\n                    it?.otherCategoty?.let { otherCategory ->\n                        this.otherCategory = otherCategory\n                        for (otherProducts in otherCategory) {\n                            if (otherProducts.slug == LIMITED_OFFERS) {\n                                limitedTimeOfferProducts.clear()\n                                if (!otherProducts.featureCategoryProducts.isNullOrEmpty()) {\n                                    otherProducts.featureCategoryProducts?.let { it1 ->\n                                        limitedTimeOfferProducts.addAll(\n                                            it1\n                                        )\n                                    }\n                                    tvLimitedTime.text = otherProducts.name\n                                    tvLimitedTime.show()\n                                } else {\n                                    tvLimitedTime.hide()\n                                }\n                            }\n                            if (otherProducts.slug == RECENTLY_VIEWED) {\n                                recentlyViewedProducts.clear()\n                                if (!otherProducts.featureCategoryProducts.isNullOrEmpty()) {\n                                    otherProducts.featureCategoryProducts?.let { it1 ->\n                                        recentlyViewedProducts.addAll(\n                                            it1\n                                        )\n                                    }\n                                    tvRecentlyViewed.text = otherProducts.name\n                                    tvRecentlyViewed.visibility = View.VISIBLE\n                                } else {\n                                    tvRecentlyViewed.visibility = View.GONE\n                                }\n                            }\n                            if (otherProducts.slug == NEWLY_ADDED) {\n                                newlyAddedProducts.clear()\n                                if (!otherProducts.featureCategoryProducts.isNullOrEmpty()) {\n                                    otherProducts.featureCategoryProducts?.let { it1 ->\n                                        newlyAddedProducts.addAll(\n                                            it1\n                                        )\n                                    }\n                                    tvNewlyAdded.text = otherProducts.name\n                                    tvNewlyAdded.visibility = View.VISIBLE\n                                } else {\n                                    tvNewlyAdded.visibility = View.GONE\n                                }\n                            }\n                        }\n                        when {\n                            limitedTimeOfferProducts.size > 0 -> {\n                                tvLimitedTime.performClick()\n                                otherCategory.find { it1 -> it1.slug == LIMITED_OFFERS }?.count?.let { count ->\n                                    setOtherProductList(\n                                        limitedTimeOfferProducts,\n                                        count\n                                    )\n                                }\n                            }\n                            newlyAddedProducts.size > 0 -> {\n                                tvNewlyAdded.performClick()\n                                otherCategory.find { it1 -> it1.slug == NEWLY_ADDED }?.count?.let { count ->\n                                    setOtherProductList(\n                                        newlyAddedProducts,\n                                        count\n                                    )\n                                }\n                            }\n                            recentlyViewedProducts.size > 0 -> {\n                                tvRecentlyViewed.performClick()\n                                otherCategory.find { it1 -> it1.slug == RECENTLY_VIEWED }?.count?.let { count ->\n                                    setOtherProductList(\n                                        recentlyViewedProducts,\n                                        count\n                                    )\n                                }\n                            }\n                            else -> {\n                                rvOtherProduct.visibility = View.GONE\n                            }\n\n                        }\n                        if (isNewlyAdded) {\n                            tvLimitedTime.isSelected = false\n                            tvNewlyAdded.isSelected = true\n                            tvRecentlyViewed.isSelected = false\n                            if (newlyAddedProducts.size > 0) {\n                                otherCategory.find { it.slug == NEWLY_ADDED }?.count?.let {\n                                    setOtherProductList(\n                                        newlyAddedProducts,\n                                        it\n                                    )\n                                }\n                                rvOtherProduct.visibility = View.VISIBLE\n                            } else {\n                                rvOtherProduct.visibility = View.GONE\n                            }\n                        }\n                    }\n                    ProgressDialogUtil.hideProgressDialog()\n                }\n            }\n            Status.ERROR -> {\n                ProgressDialogUtil.hideProgressDialog()\n                response.throwable?.let { handleGenericError(it) }\n            }\n        }\n    }\n\n    override fun onRefresh() {\n        srlList.isRefreshing = false\n        viewModel.fetchHomeData()\n    }\n\n    override fun onStop() {\n        super.onStop()\n        stopAutoScroll()\n        if (slidingCallback != null) {\n            vpAdvertisement.unregisterOnPageChangeCallback(slidingCallback)\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/nutristar/presentation/main/nutristartab/home/HomeFragment.kt	(revision 872982887fa3ac26471a8d193263a828544dfc4e)
+++ app/src/main/java/com/nutristar/presentation/main/nutristartab/home/HomeFragment.kt	(date 1604924446000)
@@ -87,10 +87,10 @@
         )[AppSharedViewModel::class.java]
     }
 
-
-    private val circularPagerAdapter by lazy {
-        CircularPagerAdapter(advertisementFragmentList, childFragmentManager, lifecycle)
-    }
+    var circularPagerAdapter: CircularPagerAdapter? = null;
+//    private val circularPagerAdapter by lazy {
+//        CircularPagerAdapter(advertisementFragmentList, childFragmentManager, lifecycle)
+//    }
 
     private fun handleClickOnBanner(bannerItem: BannerItem) {
 
@@ -362,6 +362,9 @@
     lateinit var slidingCallback: ViewPager2.OnPageChangeCallback
     private fun configRecyclerViewGroup() {
 
+        circularPagerAdapter = CircularPagerAdapter(advertisementFragmentList, childFragmentManager, lifecycle);
+
+        println("#####circularPagerAdapter--->${circularPagerAdapter}     ${circularPagerAdapter!!.fragmentList.size}")
         // Set Advertismenet adapter
         vpAdvertisement.apply {
             adapter = circularPagerAdapter
@@ -377,7 +380,7 @@
                     )
                 }
                 var currentPosition = 0;
-                val currentFragment = circularPagerAdapter.fragmentList[position % circularPagerAdapter.fragmentList.size]
+                val currentFragment = circularPagerAdapter!!.fragmentList[position % circularPagerAdapter!!.fragmentList.size]
                 if (currentFragment != null) {
                     var fragment = advertisementFragmentList.find { it -> it == currentFragment }
                     if (fragment != null) {
@@ -495,7 +498,7 @@
     private fun autoScrollViewpager() {
         vpAdvertisement.adapter?.let {
             val mNextItem = if (vpAdvertisement.currentItem == (vpAdvertisement.adapter!!.itemCount - 1)) {
-                circularPagerAdapter.getCenterPage(vpAdvertisement.currentItem)
+                circularPagerAdapter!!.getCenterPage(vpAdvertisement.currentItem)
             } else {
                 vpAdvertisement.currentItem + 1
             }
@@ -570,7 +573,7 @@
                             startAutoScroll()
 
                         }
-                        circularPagerAdapter.notifyDataSetChanged()
+                        circularPagerAdapter!!.notifyDataSetChanged()
                     }
                     it?.category?.let { categories ->
                         if (categories.isEmpty()) {
